source('~/Workspace/northeastern/cs6140/hw1/test.R')
?weighted.mean
source('~/Workspace/northeastern/cs6140/hw1/test.R')
weighted.mean(x, px)
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
sqrt(3)
source('~/Workspace/northeastern/cs6140/hw1/test.R')
px[1]
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
matrix(c(1,2,3,4), 2)
matrix(c(1,2,3,4), 3)
matrix(c(1,2,3,4), 4)
?apply
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
?par
?abline
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
?abline
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
source('~/Workspace/northeastern/cs6140/hw1/test.R')
sum(f)
print("Hey", 1)
print("Hey", 123)
?print
sampling_func(5)
abline(v = mean(sample_means) - sd_sample_means, col = "blue")
}
cat("SD of sample means: ", sd(sample_means), "\n")
hist(sample_means, breaks=seq(from=0, to=205000, 2500), main = "Samples means")
}
sampling_func(3)
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
source('~/Workspace/northeastern/cs6140/hw1/test.R')
?list
?hist
source('~/.active-rstudio-document', echo=TRUE)
sampling_func <- function(sample_size) {
no_of_samples <- 10000
samples <- sample(x, size = sample_size * no_of_samples, replace = TRUE, prob = px)
samples <- matrix(samples, sample_size)
sample_means <- apply(samples, 2, mean)
# cat("Mean of sample means: ", mean(sample_means), "\n")
# cat("SD of sample means: ", sd(sample_means), "\n")
return(sample_means)
}
plot_samples <- function(sample_means, n) {
hist(sample_means, breaks=seq(from=0, to=205000, 2500), main = cat("Sampling distribution for sampling mean for n =", n))
abline(v = mean(sample_means), col = "red")
abline(v = mean(sample_means) - sd(sample_means), col = "blue")
abline(v = mean(sample_means) + sd(sample_means), col = "blue")
}
rm(list=ls())
?hist
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sample_means
sample_means >= 71000
>log
?log
-log(2)
?entropy
??entropy
install.packages("entropy")
library("entropy", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?entropy
x
fx
f
entropy(f)
entropy(f)
entropy(f)
rm(list=ls())
entropy(f)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
entropy(f)
source('~/.active-rstudio-document', echo=TRUE)
?KL.plugin
?runif
length(x)
x
length(f)
f
hist(f)
n
N
N/41
3078.634/N
1/41
?runinf
?runif
runif(f, min(freq), max(freq))
uni <- runif(f, min(f), max(f))
uni
hist(uni)
unif <- runif(f)
unif
punif(f)
punif(f, min(f), max(f))
f
?seq
?rep
rep(1, 4)
uni <- rep(N/length(f), length(f))
uni
hist(uni)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sum(f)/N
f
sum(f)
sum(f)/length(f)
uni <- rep(sum(f)/length(f), length(f))
uni
length(uni) == length()/f
length(uni) == length(f)
?KL.plugin
KL.plugin(f, uni, unit=c("log2"))
entropy(f)
source('~/.active-rstudio-document', echo=TRUE)
uni_px
1/41
px
source('~/.active-rstudio-document', echo=TRUE)
d_kl
source('~/.active-rstudio-document', echo=TRUE)
d_kl
KL.plugin(f, uni, unit=c("log2"))
source('~/.active-rstudio-document', echo=TRUE)
?matrix
source('~/.active-rstudio-document', echo=TRUE)
m
m[1]
sum(m)
m/sum(m)
log2(m/sum(m))
source('~/.active-rstudio-document', echo=TRUE)
h_xy
source('~/.active-rstudio-document', echo=TRUE)
?apply
source('~/.active-rstudio-document', echo=TRUE)
s_prob
x_prob
sum(x_prob)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
h_a
source('~/.active-rstudio-document', echo=TRUE)
h_a
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mi_ai
h_a
h_i
x
f
N
source('~/.active-rstudio-document', echo=TRUE)
mi_ai
?cor
source('~/.active-rstudio-document', echo=TRUE)
?cor
a
i
cor(a, i)
108215/126224
31716/108215
3248/18009
source('~/.active-rstudio-document', echo=TRUE)
31716/34963
272/4224
?hist
hist(hs_grads)
source('~/.active-rstudio-document', echo=TRUE)
hist(hs_grads)
hist(uni_grads)
?hist
length(uni_grads)
?plot
?plot
source('~/.active-rstudio-document', echo=TRUE)
length(edu_probs)
source('~/.active-rstudio-document', echo=TRUE)
length(edu_probs)
c("<9th")
c
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
e_x
34963/126224
1 - 31716/34963
1 - 14762/91261
0.093 + 0.838
1 - 3248/34963
1 - 76497/91261
0.907 + 0.162
?scale
?leaps
?dim
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
read.table('Credit.csv')
setwd
setwd()
setwd('~/Workspace/northeastern/cs6140/hw2/')
read.table('Credit.csv')
source('~/.active-rstudio-document', echo=TRUE)
dim(credit)
source('~/.active-rstudio-document', echo=TRUE)
nrow(credit)
ncol(credit)
?cor
scale
?scale
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = '>')
ratio = sample(1:nrow(credit), size = 0.7*nrow(credit))
source('~/.active-rstudio-document', echo=TRUE)
ratio = sample(1:nrow(credit), size = 0.7*nrow(credit))
Training = credit[ratio,]
Validataion = credit[-ratio,]
head(Training)
ratio = sample(1:nrow(credit), size = 0.7*nrow(credit))
Training = credit[ratio,]
Validataion = credit[-ratio,]
head(Training)
nrow(Training)
detach("package:tidyverse", unload=TRUE)
library(tidyverse)
>
%>%
?select
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#ratio = sample(1:nrow(credit), size = 0.7*nrow(credit))
#Training = credit[ratio,]
#Validataion = credit[-ratio,]
#head(Training)
library(tidyverse)
set.seed(123)
# credit <- read.table("Credit.csv", sep=",", header=TRUE)
credit <- read_csv("Credit.csv") %>%
# remove first ID column
select(-X1)
head(credit)
library(tidyverse)
set.seed(123)
# credit <- read.table("Credit.csv", sep=",", header=TRUE)
credit <- read_csv("Credit.csv", sep=",", header=TRUE) %>%
# remove first ID column
select(-X1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(tidyverse)
credit <- read_csv("Credit.csv") %>%
# remove first ID column
select(-X1)
names(credit) <- stringr::str_to_lower(names(credit))   # convert column names to lowercase
str(credit)
credit <- read_csv('Credit.csv')
credit <- read_csv('Credit.csv') %>% select(-X1)
head(credit)
?selec
?select
vignette("dplyr")
str_to_lower
?str_to_lower
vignette("tibble")
?select
?sample
?sample()
library(tidyverse)
credit <- read_csv("Credit.csv") %>%
# remove first ID column
select(-X1)
names(credit) <- stringr::str_to_lower(names(credit))   # convert column names to lowercase
head(credit)
dim(credit)
training_subset <- sample_n(credit, 200, replace = TRUE)
training_subset
head(training_subset)
-training_subset
dim(-training_subset)
rm(list=ls())
ratio = sample_n(credit, 200, replace = TRUE)
credit <- read_csv("Credit.csv") %>% select(-X1)
head(credit)
names(credit)
names(credit) <- stringr::str_to_lower(names(credit))
head(credit)
ratio <- sample_n(credit, 200)
ratio
head(ratio)
dim(ratio)
head(credit[raio, ])
head(credit[ratio, ])
credit[ratio, ]
credit[ratio,]
credit
ratio
credit[ratio,]
ratio = sample(1:nrows(credit), size = 200)
nrows(credit)
ratio = sample(1:nrow(credit), size = 200)
ratio
head(credit)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = '>')
library(dplyr)
library(broom)
library(ggplot2)
library(leaps)
library(glmnet)
library(readr)
setwd('~/Workspace/northeastern/cs6140/hw2')
other_diamonds <- diamonds
other_diamonds$group <- with(other_diamonds,
cut(other_diamonds$carat,
breaks = quantile(other_diamonds$carat, prob = seq(0, 1, by = 0.2)),
include.lowest = TRUE,
labels = c("1", "2", "3", "4", "5")))
p <- ggplot(other_diamonds, aes(x = color, y = price, color = group))
p + geom_boxplot()
head(other_diamonds)
class(other_diamonds)
class(diamonds[c(1,3,7)])
class(diamonds)
set.seed(123)
credit <- read_csv("Credit.csv") %>%
select(-X1)
names(credit) <- stringr::str_to_lower(names(credit))
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(Training, income, limit, rating, cards, age, education)
ratio <- sample(1:nrow(credit), 200)
Training <- credit[ratio, ]
Validation <- credit[-ratio, ]
summary(Training)
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(Training, income, limit, rating, cards, age, education)
pairs(continuous_training_data, main="Correlation between numeric features")
smoothScatter(Training$income, Training$rating, xlab = "Income", ylab = "Rating")
smoothScatter(Training$income, Training$limit, xlab = "Income", ylab = "Limit")
round(cor(continuous_training_data[,-1]), digits = 2)
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(Training, income, limit, rating, cards, age, education)
head(continuous_training_data)
pairs(continuous_training_data, main="Correlation between numeric features")
smoothScatter(Training$income, Training$rating, xlab = "Income", ylab = "Rating")
smoothScatter(Training$income, Training$limit, xlab = "Income", ylab = "Limit")
round(cor(continuous_training_data[,-1]), digits = 2)
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(Training, income, limit, rating, cards, age, education)
head(continuous_training_data)
pairs(continuous_training_data, main="Correlation between numeric features")
smoothScatter(Training$income, Training$rating, xlab = "Income", ylab = "Rating")
smoothScatter(Training$income, Training$limit, xlab = "Income", ylab = "Limit")
round(cor(continuous_training_data), digits = 2)
set.seed(123)
credit <- read_csv("Credit.csv") %>%
select(-X1)
names(credit) <- stringr::str_to_lower(names(credit))
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(credit_training, income, limit, rating, cards, age, education)
ratio <- sample(1:nrow(credit), 200)
credit_training <- credit[ratio, ]
credit_validation <- credit[-ratio, ]
summary(credit_training)
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(credit_training, income, limit, rating, cards, age, education)
head(continuous_training_data)
pairs(continuous_training_data, main="Correlation between numeric features")
smoothScatter(credit_training$income, credit_training$rating, xlab = "Income", ylab = "Rating")
smoothScatter(credit_training$income, credit_training$limit, xlab = "Income", ylab = "Limit")
round(cor(continuous_training_data), digits = 2)
par(mfrow = c(2,2))
# plot(reg.summary$rss, xlab = "Number of variables", ylab = "Residual Sum of Squares (RSS)", type = "l")
plot(reg.summary$adjr2, xlab = "Number of variables", ylab = "Adjacent R square", type = "l")
set.seed(123)
credit <- read_csv("Credit.csv") %>%
select(-X1)
# Convert column names to lowercase just for convenience
names(credit) <- stringr::str_to_lower(names(credit))
summary(credit_training)
# Observed correlations
# Income: Limit, Rating
# Limit: Income, Rating, Balance
# Rating: Income, Limit, Balance
continuous_training_data <- select(credit_training, income, limit, rating, cards, age, education)
pairs(continuous_training_data, main="Correlation between numeric features")
smoothScatter(credit_training$income, credit_training$rating, xlab = "Income", ylab = "Rating")
smoothScatter(credit_training$income, credit_training$limit, xlab = "Income", ylab = "Limit")
round(cor(continuous_training_data), digits = 2)
any(is.na(Training))
boxplot(scale(continuous_training_data))
lm_train <- lm(balance~., data=Training)
summary(lm_train)
# Evaluate summary(lm_train):
# https://feliperego.github.io/blog/2015/10/23/Interpreting-Model-Output-In-R
# Density plot
plot(density(lm_train$residuals), main = "Density plot of residuals")
# QQ Plot of residuals
qqnorm(lm_train$residuals, main = "Normal qqplot of residuals")
qqline(lm_train$residuals)
lm_train_transformed <- lm((balance^3)~., data=Training)
qqnorm(lm_train_transformed$residuals, main = "Normal qqplot of residuals with (balance^3)")
qqline(lm_train_transformed$residuals)
i=which(lm_train$residuals==max(lm_train$residuals));
Training[i,]
regfit.full <- regsubsets(balance~., data = Training, really.big = TRUE)
reg.summary <- summary(regfit.full)
reg.summary
par(mfrow = c(2,2))
# plot(reg.summary$rss, xlab = "Number of variables", ylab = "Residual Sum of Squares (RSS)", type = "l")
plot(reg.summary$adjr2, xlab = "Number of variables", ylab = "Adjacent R square", type = "l")
plot(reg.summary$cp, xlab = "Number of variables", ylab = "CP", type = "l")
plot(reg.summary$bic, xlab = "Number of variables", ylab = "BIC", type = "l")
plot(reg.summary$aic, xlab = "Number of variables", ylab = "AIC", type = "l")
?reg.summary$aic
par(mfrow = c(2,2))
# plot(reg.summary$rss, xlab = "Number of variables", ylab = "Residual Sum of Squares (RSS)", type = "l")
plot(reg.summary$adjr2, xlab = "Number of variables", ylab = "Adjacent R square", type = "l")
plot(reg.summary$cp, xlab = "Number of variables", ylab = "CP", type = "l")
plot(reg.summary$bic, xlab = "Number of variables", ylab = "BIC", type = "l")
which.min(reg.summary$bic)
which.min(reg.summary$bic)
subset_select_model <- lm(balance ~ income + limit + cards + student, data = Training)
# coefficients of the predictors
coef(regfit.full, 4)
