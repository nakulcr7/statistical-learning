lines(age.grid, preds$fit, lwd = 2, col = "blue")
?matlines
```{r fig.width=7, fig.height=6}
list()
ls)_
ls()
rm(list=ls())
require(ISLR)
attach(Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
head(wage)
head(Wage)
age.grid = seq(from = min(age), to = max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, col = "blue", lty = 2)
fit = lm(wage ~ poly(age, 4), data = Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
summary(fit)
age
age.grid = seq(min(age), max(age))
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds + 2 * preds$se, preds - 2 * preds$se)
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
age
age^2
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
```{r setup, include=FALSE}
# knitr::opts_chunk$set(echo = TRUE)
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
?fitted
knitr::opts_chunk$set(echo = TRUE)
plot(fitted(fit), fitted(fita))
summary(fit)
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = Binomial)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
se.bands
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 1))
?matplot
points(jitter(age), I(wage>250) / 10, pch = "l", cex = 0.5)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 1))
points(jitter(age), I(wage>250) / 10, pch = "l", cex = 0.5)
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 1))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage>250) / 10, pch = "l", cex = 0.5)
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
require(splines)
fit = lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage)
plot(age, wage, col = "darkgrey")
age=age.grid
age
list(age.grid)
lines(age.grid, predict(fit, age.grid), col = "darkgreen", lwd = 2)
lines(age.grid, predict(fit, list(age.grid)), col = "darkgreen", lwd = 2)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
age
detach(Wage)
attach(Wage)
age
rm(list=ls())
age
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age.grid)), col = "darkgreen", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
require(ISLR)
attach(Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
plot(fitted(fit), fitted(fita))
summary(fit)
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age.grid)), col = "darkgreen", lwd = 2)
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
?smooth.spline
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
require(ISLR)
attach(Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
plot(fitted(fit), fitted(fita))
summary(fit)
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
require(ISLR)
attach(Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
plot(fitted(fit), fitted(fita))
summary(fit)
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
# Now, smoothing splines
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
?lines
fit
fit = smooth.spline(age, wage, cv = TRUE)
fit
lines(fit, col = "purple", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
require(ISLR)
attach(Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
plot(fitted(fit), fitted(fita))
summary(fit)
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
# Now, smoothing splines
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
fit = smooth.spline(age, wage, cv = TRUE)
lines(fit, col = "purple", lwd = 2)
rm(list = ls())
# knitr::opts_chunk$set(echo = TRUE)
require(ISLR)
attach(Wage)
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
plot(fitted(fit), fitted(fita))
summary(fit)
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
# Now, smoothing splines
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
fit = smooth.spline(age, wage, cv = TRUE)
lines(fit, col = "purple", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
require(ISLR)
attach(Wage)
# Chunk 3
fit = lm(wage ~ poly(age, 4), data = Wage)
summary(fit)
# Chunk 4
age.grid = seq(min(age), max(age))
preds = predict(fit, newdata = list(age = age.grid), se = TRUE)
se.bands = cbind(preds$fit + 2 * preds$se, preds$fit - 2 * preds$se)
plot(age, wage, col = "darkgrey")
lines(age.grid, preds$fit, lwd = 2, col = "blue")
matlines(age.grid, se.bands, lty = 2, col = "blue")
# Chunk 5
fita = lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage)
summary(fita)
# Chunk 6
plot(fitted(fit), fitted(fita))
# Chunk 7
summary(fit)
# Chunk 8
fita = lm(wage ~ education, data = Wage)
fitb = lm(wage ~ education + age, data = Wage)
fitc = lm(wage ~ education + poly(age, 2), data = Wage)
fitd = lm(wage ~ education + poly(age, 3), data = Wage)
anova(fita, fitb, fitc, fitd)
# Chunk 9
fit = glm(I(wage > 250) ~ poly(age, 3), data = Wage, family = binomial)
summary(fit)
preds = predict(fit, newdata = list(age=age.grid), se = TRUE)
se.bands = preds$fit + cbind(fit = 0, lower = -2 * preds$se, upper = 2 * preds$se)
# Chunk 10
prob.bands = exp(se.bands) / (1 + exp(se.bands))
matplot(age.grid, prob.bands, col = "blue", lwd = c(2, 1, 1), lty = c(1, 2, 2), type = "l", ylim = c(0, 0.1))
points(jitter(age), I(wage > 250) / 10, pch = "l", cex = 0.5)
# Chunk 11
require(splines)
knots = c(25, 40, 60)
fit = lm(wage ~ bs(age, knots = knots), data = Wage)
plot(age, wage, col = "darkgrey")
lines(age.grid, predict(fit, list(age=age.grid)), col = "darkgreen", lwd = 2)
abline(v = knots, lty = 2, col = "darkgreen")
# Chunk 12
# Now, smoothing splines
fit = smooth.spline(age, wage, df = 16)
lines(fit, col = "red", lwd = 2)
fit = smooth.spline(age, wage, cv = TRUE)
lines(fit, col = "purple", lwd = 2)
fit
fit
summary(fit)
gam1 = gam(wage ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage)
require(gam)
gam1 = gam(wage ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage)
install.packages("gam")
?par
require(gam)
gam1 = gam(wage ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage)
par(mfrow = c(1, 3))
plot(gam1, se = TRUE)
gam2 = gam(I(wage > 250) ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage, family = binomial)
plot(gamw)
plot(gam2)
gam2 = gam(I(wage > 250) ~ s(age, df = 4) + s(year, df = 4) + education, data = Wage, family = binomial)
plot(gam2, se = TRUE)
plot(gam2)
gam2a = gam(wage ~ s(age, df = 4) + year + education, data = Wage)
gam2a = gam(I(wage > 250) ~ s(age, df = 4) + year + education, data = Wage, family = binomial)
anova(gam2a, gam2, test = "Chisq")
par(mfrow = c(1, 3))
lm1 = lm(wage ~ ns(age, df = 4) + ns(year, df = 4) + education, data = Wage)
par(mfrow = c(1, 3))
# Natural spline basis function
lm1 = lm(wage ~ ns(age, df = 4) + ns(year, df = 4) + education, data = Wage)
plot.gam(lm1, se = TRUE)
gmaps_airport
airport_vec
rep("red", 3, "blue", 3)
paste(rep("red", 4), rep("blue", 3))
l1 = rep("red", 3)
l2 = rep("blue", 4)
append(l1, l2)
rep("red", 3)
x1 = c(3, 2, 4, 1, 2, 4, 4)
x2 = c(4, 2, 4, 4, 1, 3, 1)
y = append(rep("red", 4), rep("blue", 3))
plot(x1, x2, col = y, xlim = c(0, 5), ylim = c(0, 5))
x1 = c(3, 2, 4, 1, 2, 4, 4)
x2 = c(4, 2, 4, 4, 1, 3, 1)
y = append(rep("red", 4), rep("blue", 3))
plot(x1, x2, col = y, xlim = c(0, 5), ylim = c(0, 5), xlab = "X1", ylab = "X2")
# Sigmoid activation
sigmoid <- function(z){1.0/(1.0+exp(-z))}
# Perceptron
perceptron <- function(X, y, lr)
{
delta <- 1e-8  # Allowed difference between consecutive parameter estiamtes
X_mat <- cbind(1, X)
w <- matrix(0, nrow=ncol(X_mat))  # Initialize weights as zeros
w_prev <- matrix(1, nrow=ncol(X_mat))
w_diff <- abs(w - w_prev)
# Batch gradient descent
while(length(w_diff[w_diff > delta]) > 1)  # Until convergence
{
residual <- sigmoid(X_mat %*% w) - y
del <- t(X_mat) %*% as.matrix(residual, ncol=nrow(X_mat)) *  (1/nrow(X_mat))  # Derivative
w_prev <- w
w <- w - (lr*del)  # New weights
w_diff <- abs(w - w_prev)
}
return(w)
}
weights <- perceptron(X, y, 5)
# Parameters
weights
weights
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = '>')
setwd("~/Workspace/northeastern/cs6140/hw5/")
# Chunk 2
# Imports
library(dplyr)
rm(list=ls())
set.seed(123)
# Read the data
saheart <- read.table("SAheart.txt", sep = ",", header = TRUE) %>% select(-row.names)
# Separate input and output
X <- saheart[-c(5, 10)]
X <- as.matrix(X/max(X)) # Normalized matrix for faster convergence
y <- saheart$chd
# Chunk 3
logreg.fit <- glm(y ~ X, family = binomial(link = "logit"))
# Parameters
coef(logreg.fit)
# Chunk 4
# Prediction accuracy
logreg.pred <- predict(logreg.fit, newdata = saheart[-c(5, 10)], type='response')
logreg.pred <- ifelse(logreg.pred > 0.5, 1, 0)
acc <- 1 - mean(logreg.pred != saheart$chd)
acc
weights
weights
# Sigmoid activation
sigmoid <- function(z){1.0/(1.0+exp(-z))}
# Perceptron
perceptron <- function(X, y, lr)
{
delta <- 1e-8  # Allowed difference between consecutive parameter estiamtes
X_mat <- cbind(1, X)
w <- matrix(0, nrow=ncol(X_mat))  # Initialize weights as zeros
w_prev <- matrix(1, nrow=ncol(X_mat))
w_diff <- abs(w - w_prev)
# Batch gradient descent
while(length(w_diff[w_diff > delta]) > 1)  # Until convergence
{
residual <- sigmoid(X_mat %*% w) - y
del <- t(X_mat) %*% as.matrix(residual, ncol=nrow(X_mat)) *  (1/nrow(X_mat))  # Derivative
w_prev <- w
w <- w - (lr*del)  # New weights
w_diff <- abs(w - w_prev)
}
w
}
weights <- perceptron(X, y, 5)
# Parameters
weights
# Sigmoid activation
sigmoid <- function(z){1.0/(1.0+exp(-z))}
# Perceptron
perceptron <- function(X, y, lr)
{
delta <- 1e-8  # Allowed difference between consecutive parameter estiamtes
X_mat <- cbind(1, X)
w <- matrix(0, nrow=ncol(X_mat))  # Initialize weights as zeros
w_prev <- matrix(1, nrow=ncol(X_mat))
w_diff <- abs(w - w_prev)
# Batch gradient descent
while(length(w_diff[w_diff > delta]) > 1)  # Until convergence
{
residual <- sigmoid(X_mat %*% w) - y
del <- t(X_mat) %*% as.matrix(residual, ncol=nrow(X_mat)) *  (1/nrow(X_mat))  # Derivative
w_prev <- w
w <- w - (lr*del)  # New weights
w_diff <- abs(w - w_prev)
}
return(w)
}
weights <- perceptron(X, y, 5)
# Parameters
weights
X
y
dim(y)
shape(y)
y.dim()
matrix(0, nrow=ncol(X_mat))  # Initialize weights as zeros
matrix(0, nrow=ncol(2))  # Initialize weights as zeros
matrix(0, nrow=2)
X
X_mat <- cbind(1, X)
w <- matrix(0, nrow=ncol(X_mat))  # Initialize weights as zeros
w_prev <- matrix(1, nrow=ncol(X_mat))
w_diff <- abs(w - w_prev)
w_diff
residual <- sigmoid(X_mat %*% w) - y
residual
as.matrix(residual, ncol=nrow(X_mat))
